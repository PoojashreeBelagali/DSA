When will the ants die
Problem Description

We have a wooden plank of the length A units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.
When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions doesn't take any additional time.

When an ant reaches one end of the plank at a time t, it falls out of the plank imediately.

Given an integer A and two integer arrays B signifying left going ants and C signifying right going ants, the positions of the ants moving to the left and the right. Return the moment when the last ant(s) fall out of the plank.


Problem Constraints
1 <= A <= 10^4
0 <= B.length <= A + 1
0 <= B[i] <= A
0 <= C.length <= A + 1
0 <= C[i] <= A
1 <= B.length + C.length <= A + 1
All values of left and right are unique, and each value can appear only in one of the two arrays.


Input Format
First argument contains integer A.

Second argument contains B denoting ants moving left.

Third argument contains C denoting ants moving right.


Output Format
Return a single integer.


Code:
  int A=lenth of plank;
  int[]  B= left going ants array
  int[] C= right going ants array
  int max=Integer.MIN_VALUE;
      int ans=Integer.MIN_VALUE;
        for(int i=0;i<B.length;i++){
            ans=Math.max(ans,B[i]);
        }
        for(int i=0;i<C.length;i++){
            ans=Math.max(ans,A-C[i]);
        }
        
        return max;
        
  Code approach:
  
  1. A is length of plank
  2. B is left going ants, so the time taken to reach left end (0) is (B-0);
  3. C is right going ants, so the time taken to reach the right end is Total plank size (A) - C
  4. Traverse through both the arrays and find max at each iteration
  
