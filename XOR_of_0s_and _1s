You are given an array A (containing only 0 and 1) as element of N length.
Given L and R, you need to determine value of XOR of all elements from L to R (both inclusive) and number of unset bits (0's) in the given range of the array.



Problem Constraints
1<=N,Q<=100000
1<=L<=R<=N


Input Format
First argument contains the array of size N containing 0 and 1 only. 
Second argument contains a 2D array with Q rows and 2 columns, each row represent a query with 2 columns representing L and R.


Output Format
Return an 2D array of Q rows and 2 columns i.e the xor value and number of unset bits in that range respectively for each query.


Example Input
A=[1,0,0,0,1]
B=[ [2,4],
    [1,5],
    [3,5] ]
    
    
 #Code approach
 1. An array containing xor of cumulative previous and current elemet pXOR
 2. Prefix sun Array psum
 3. For every queue, L & R are given L is staring index and R is ending index. 
 4. Eith R-(L-1) - XOR array will give desired value and sum array will give count of nos
 5. R-(L-1) - step4 would give count of 0s in sub array
 
 Code:
 
 
public class XOR {
    public static void main(String[] args) {
        int[] A={1,0,0,0,1};
        int[][] B={ {2,4},{1,5},{3,5}};

        int[][] result=new int[B.length][B[0].length];

        int[] psum= new int[A.length];
        psum[0]=A[0];
        for(int i =1;i<A.length;i++){
            psum[i]=A[i]+psum[i-1];
        }

        int[] pxor= new int[A.length];
        pxor[0]=A[0];
        for(int i =1;i<A.length;i++){
            pxor[i]=A[i]^pxor[i-1];
        }

        for(int i=0;i<B.length;i++){
            int l=B[i][0]-1;
            int r=B[i][1]-1;
            //System.out.print("l"+" "+l+" "+"r"+" "+r);

            int bits=0;
            int countOf1s=0;
            int t=l-1;
            if(l==0){
                bits= pxor[r];
                countOf1s=psum[r];
                result[i][0]=bits;
                result[i][1]=r-t-countOf1s;
          } else {
              
              bits = pxor[r] ^ pxor[t];
              countOf1s=psum[r]-psum[t];
                result[i][0]=bits;

                result[i][1]=r-t-countOf1s;
          }


        }
        System.out.println(Arrays.toString(result[1]));
        return result;
        }
        


}

    
